buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.liferay:com.liferay.gradle.plugins.node:$nodePluginVersion")
    }
}

plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
repositories {
    mavenCentral()
    // for kotlinx-serialization-runtime
    maven { url "https://kotlin.bintray.com/kotlinx" }
    // for DateTime
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: "com.liferay.node"

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.macosX64, 'macos')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerializationVersion"
                implementation "com.soywiz:klock:$klockVersion"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerializationVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlinSerializationVersion"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
        macosMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinSerializationVersion"
            }
        }
        macosTest {
        }
    }
}

[compileKotlinJs, compileTestKotlinJs]*.configure {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
    }
}

node {
    nodeVersion = project.nodeVersion
}

// see: https://github.com/JetBrains/kotlin/blob/503f061c8c00c1b1a56148694ffbf54181b0e070/idea/idea-gradle/src/org/jetbrains/kotlin/idea/configuration/KotlinGradleWebMultiplatformModuleBuilder.kt#L289-L302
task populateNodeModules(dependsOn: [npmInstall, compileTestKotlinJs]) {
    doLast {
        copy {
            from compileKotlinJs.destinationDir
            from compileTestKotlinJs.destinationDir

            def jsCompilations = kotlin.targets.js.compilations
            jsCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    println("from ${it.toString().split('/').last()}")
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }

            into "${projectDir}/node_modules"
        }
    }
}

jsTest.dependsOn npmRunTest
npmRunTest.dependsOn populateNodeModules
